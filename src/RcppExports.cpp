// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// phiUpdatecpp
NumericMatrix phiUpdatecpp(NumericMatrix phi, int i, int clustnew, NumericVector n, NumericVector betaHat);
RcppExport SEXP _sugsvaRsel_phiUpdatecpp(SEXP phiSEXP, SEXP iSEXP, SEXP clustnewSEXP, SEXP nSEXP, SEXP betaHatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type clustnew(clustnewSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type betaHat(betaHatSEXP);
    rcpp_result_gen = Rcpp::wrap(phiUpdatecpp(phi, i, clustnew, n, betaHat));
    return rcpp_result_gen;
END_RCPP
}
// sugsclusterProbcpp
arma::vec sugsclusterProbcpp(NumericVector x, int K, int i, int D, NumericVector n, NumericVector betaHat, NumericMatrix phi, NumericMatrix m, NumericVector nu, NumericMatrix S, NumericVector lambda);
RcppExport SEXP _sugsvaRsel_sugsclusterProbcpp(SEXP xSEXP, SEXP KSEXP, SEXP iSEXP, SEXP DSEXP, SEXP nSEXP, SEXP betaHatSEXP, SEXP phiSEXP, SEXP mSEXP, SEXP nuSEXP, SEXP SSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type betaHat(betaHatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(sugsclusterProbcpp(x, K, i, D, n, betaHat, phi, m, nu, S, lambda));
    return rcpp_result_gen;
END_RCPP
}
// sugsclustMargcpp
arma::vec sugsclustMargcpp(NumericVector x, int K, int i, int D, NumericVector n, NumericVector betaHat, NumericMatrix phi, NumericMatrix m, NumericVector nu, NumericMatrix S, NumericVector lambda, arma::rowvec intfeature);
RcppExport SEXP _sugsvaRsel_sugsclustMargcpp(SEXP xSEXP, SEXP KSEXP, SEXP iSEXP, SEXP DSEXP, SEXP nSEXP, SEXP betaHatSEXP, SEXP phiSEXP, SEXP mSEXP, SEXP nuSEXP, SEXP SSEXP, SEXP lambdaSEXP, SEXP intfeatureSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type betaHat(betaHatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type intfeature(intfeatureSEXP);
    rcpp_result_gen = Rcpp::wrap(sugsclustMargcpp(x, K, i, D, n, betaHat, phi, m, nu, S, lambda, intfeature));
    return rcpp_result_gen;
END_RCPP
}
// sugsnewclustMargcpp
arma::vec sugsnewclustMargcpp(NumericVector x, int i, int D, NumericMatrix phi, NumericVector betaHat, NumericVector mu_0, double nu_0, NumericVector S_0, double lambda_0, arma::rowvec intfeature);
RcppExport SEXP _sugsvaRsel_sugsnewclustMargcpp(SEXP xSEXP, SEXP iSEXP, SEXP DSEXP, SEXP phiSEXP, SEXP betaHatSEXP, SEXP mu_0SEXP, SEXP nu_0SEXP, SEXP S_0SEXP, SEXP lambda_0SEXP, SEXP intfeatureSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type betaHat(betaHatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< double >::type nu_0(nu_0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type S_0(S_0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_0(lambda_0SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type intfeature(intfeatureSEXP);
    rcpp_result_gen = Rcpp::wrap(sugsnewclustMargcpp(x, i, D, phi, betaHat, mu_0, nu_0, S_0, lambda_0, intfeature));
    return rcpp_result_gen;
END_RCPP
}
// sugscompPmlcpp
arma::vec sugscompPmlcpp(NumericMatrix X, int K, int N, int D, NumericVector n, NumericMatrix phi, NumericVector betaHat, NumericMatrix m, NumericVector nu, NumericVector lambda, NumericMatrix S, NumericVector mu_0, double nu_0, double lambda_0, NumericVector S_0);
RcppExport SEXP _sugsvaRsel_sugscompPmlcpp(SEXP XSEXP, SEXP KSEXP, SEXP NSEXP, SEXP DSEXP, SEXP nSEXP, SEXP phiSEXP, SEXP betaHatSEXP, SEXP mSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP SSEXP, SEXP mu_0SEXP, SEXP nu_0SEXP, SEXP lambda_0SEXP, SEXP S_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type betaHat(betaHatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< double >::type nu_0(nu_0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_0(lambda_0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type S_0(S_0SEXP);
    rcpp_result_gen = Rcpp::wrap(sugscompPmlcpp(X, K, N, D, n, phi, betaHat, m, nu, lambda, S, mu_0, nu_0, lambda_0, S_0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sugsvaRsel_phiUpdatecpp", (DL_FUNC) &_sugsvaRsel_phiUpdatecpp, 5},
    {"_sugsvaRsel_sugsclusterProbcpp", (DL_FUNC) &_sugsvaRsel_sugsclusterProbcpp, 11},
    {"_sugsvaRsel_sugsclustMargcpp", (DL_FUNC) &_sugsvaRsel_sugsclustMargcpp, 12},
    {"_sugsvaRsel_sugsnewclustMargcpp", (DL_FUNC) &_sugsvaRsel_sugsnewclustMargcpp, 10},
    {"_sugsvaRsel_sugscompPmlcpp", (DL_FUNC) &_sugsvaRsel_sugscompPmlcpp, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_sugsvaRsel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
